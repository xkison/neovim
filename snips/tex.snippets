extends texmath

global !p


# math_regions = [
#     "A", "AS", "B", "BS", "C",
#     "CS", "D", "DS", "E", "ES",
#     "F", "FS", "G", "GS", "H",
#     "HS", "I", "IS", "J", "JS",
#     "K", "KS", "L", "LS", "DS",
#     "V", "W", "X", "Y", "Z",
#     "AmsA", "AmsB", "AmsC", "AmsD", "AmsE",
#     "AmsF", "AmsG", "AmsAS", "AmsBS", "AmsCS",
#     "AmsDS", "AmsES", "AmsFS", "AmsGS",
# ]
# tex_math_regions = list(map(lambda x: f"texMathRegion{x}", math_regions ))
# tex_math_ignored_regions = ['texMathText']
# tex_math_region_ids = set(vim.eval('map('+str(tex_math_regions)+", 'hlID(v:val)')"))
# tex_math_ignored_region_ids = set(vim.eval('map('+str(tex_math_ignored_regions)+", 'hlID(v:val)')"))

# def math():
#     syn_stack_ids = set(vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))"))
#     return not tex_math_region_ids <= tex_math_ignored_region_ids and tex_math_region_ids <= tex_math_region_ids 


def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and x != '0'

endglobal



snippet  begin "begin{} / end{}" b
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet abs "abstract environment" b
\begin{abstract}
	$0
\end{abstract}
endsnippet

snippet tab "tabular / array environment" b
\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
$0${2/(?<=.)(c|l|r)|./(?1: & )/g}
\end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
endsnippet

pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
	$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${2:htpb}]
	\centering
	\includegraphics[width=${3:0.8}\linewidth]{${4:name.ext}}
	\caption{${4/(\w+)\.\w+/\u$1/}$0}%
	\label{fig:${4/(\w+)\.\w+/$1/}}
\end{figure}
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" b
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet it "Individual item" b
\item $0
endsnippet

snippet part "Part" b
\part{${1:part name}}%
\label{prt:${2:${1/(\w+)|\W+/(?1:\L$0\E:_)/ga}}}

$0
endsnippet

snippet cha "Chapter" b
\chapter{${1:chapter name}}%
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sec "Section"
\section{${1:${VISUAL:section name}}}%
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sec* "Section"
\section*{${1:${VISUAL:section name}}}%
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet


snippet sub "Subsection"
\subsection{${1:${VISUAL:subsection name}}}%
\label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sub* "Subsection"
\subsection*{${1:${VISUAL:subsection name}}}%
\label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet ssub "Subsubsection"
\subsubsection{${1:${VISUAL:subsubsection name}}}%
\label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ssub* "Subsubsection"
\subsubsection*{${1:${VISUAL:subsubsection name}}}%
\label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet par "Paragraph"
\paragraph{${1:${VISUAL:paragraph name}}}%
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet subp "Subparagraph"
\subparagraph{${1:${VISUAL:subparagraph name}}}%
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ac "Acroynm normal" b
\ac{${1:acronym}}
$0
endsnippet

snippet acl "Acroynm expanded" b
\acl{${1:acronym}}
$0
endsnippet

snippet ni "Non-indented paragraph" b
\noindent
$0
endsnippet

snippet pac "Package" b
\usepackage`!p snip.rv='[' if t[1] else ""`${1:options}`!p snip.rv = ']' if t[1] else ""`{${2:package}}$0
endsnippet

snippet lp "Long parenthesis"
\left(${1:${VISUAL:contents}}\right)$0
endsnippet

snippet "mint(ed)?( (\S+))?" "Minted code typeset" br
\begin{listing}
\begin{minted}[linenos,numbersep=5pt,frame=lines,framesep=2mm]{${1:`!p
snip.rv = match.group(3) if match.group(2) is not None else "language"`}}
${2:${VISUAL:code}}
\end{minted}
\caption{${3:caption name}}
\label{lst:${4:${3/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
\end{listing}

$0
endsnippet

snippet gln "New glossary item" b
\newglossaryentry{${1:identifier}}
{
    name={${2:name}},
    first={${3:first occurrence}},
    sort={${4:sort value}},
    description={${0:description}},
}
endsnippet
snippet glnl "New long glossary item" b
\longnewglossaryentry{${1:identifier}}
{
    name={${2:name}},
    first={${3:first occurrence}},
    sort={${4:sort value}},
}
{
    ${0:description}
}
endsnippet

# Bold text
snippet bf "Bold"
\textbf{$1} $0
endsnippet

# Italic text
snippet ita "Italics"
\textit{$1} $0
endsnippet

# Underlined text
snippet und "Underline"
\underline{$1} $0
endsnippet

# Equation
snippet eq "equation" b
\begin{equation}
	$0
\end{equation}
endsnippet

# Labed Equation
snippet eql "equation with label" b
\begin{equation}
\label{eq:$1}
	$0
\end{equation}
endsnippet



# context "math()"
# snippet _ "Subscript" iA
# _`!p snip.rv='{' if t[1] else ""`${1}`!p snip.rv = '}' if t[1] else ""`$0
# endsnippet

# context "math()"
# snippet ^ "Superscript" iA
# ^`!p snip.rv='{' if t[1] else ""`${1}`!p snip.rv = '}' if t[1] else ""`$0
# endsnippet

# context "math()"
# snippet // "Fraction" iA
# \\frac{$1}{$2}$0
# endsnippet

# snippet frac "Fraction" i
# \\frac{${VISUAL}}{$1}$0
# endsnippet


# context "math()"
# snippet \bm "\bm{}" iA
# \\bm{$1}$0
# endsnippet

# context "math()"
# snippet \vec "\vec{}" iA
# \\vec{$1}$0
# endsnippet

# context "math()"
# snippet \hat "\hat{}" iA
# \\hat{$1}$0
# endsnippet

# # math
# snippet mk "Math" wA
# $${1}$`!p
# if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
# 	snip.rv = ' '
# else:
# 	snip.rv = ''
# `$2
# endsnippet

# snippet dm "Math" wA
# \[
# ${1:${VISUAL}}
# .\] $0
# endsnippet

# snippet align "Align" bA
# \begin{align*}
# 	$1
# .\end{align*}
# endsnippet


# context "math()"
# snippet bb "^{ }" iA
# ^{$1}$0
# endsnippet

# context "math()"
snippet  ^^ "^^" iA
^{$1}$0
endsnippet

# context "math()"
snippet __ "_{ }" iA
_{$1}$0
endsnippet



# vim:ft=snippets:

